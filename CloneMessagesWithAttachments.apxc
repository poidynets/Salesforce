//Declaring Map for holding old Email Records
Map<Id, EmailMessage>originalEmailMap = new Map<Id, EmailMessage>();
//Declaring Map for holding old Email Records
Map<Id, EmailMessage>clonedEmailsByLink = new Map<Id, EmailMessage>();
//Declaring List for holding all clones of ContentDocumentLink Records
List<ContentDocumentLink> clonedLinks = new List <ContentDocumentLink>();
//Declaring value of Opportunity record which consist messages we want to migrate
String parentOpportunity = '0060X00000ec5UYQAY';
//Declaring value of Opportunity record which should get messages from original Opportunity object
String childOpportunity = '0061x00000IEVFQAA5';
//Retrieving all EmailMessage records related with Opportunity we are interested in
List<EmailMessage> eMailMessages = [SELECT Id, RelatedToId, FromName, HasAttachment, ParentId, Subject, HTMLBody, MessageDate, BccAddress, BccIds, CcAddress, CcIds, EmailTemplateId, FirstOpenedDate, FromAddress, Headers, Incoming, IsBounced, IsClientManaged, IsDeleted, IsExternallyVisible, IsOpened, IsTracked, LastOpenedDate, ReplyToEmailMessageId, TextBody, ToAddress
                                    FROM EmailMessage
                                    WHERE RelatedToId = : parentOpportunity];
//Putting original emailMessage records to Map
for(EmailMessage email : eMailMessages){
    originalEmailMap.put(email.Id, email);
    System.Debug('Message ID from originalEmailMap: ' + email.Id);
}


//Declaring List to hold all EmailMessage Recors Id's
Set<Id> messagesIDs = new Set<Id>();
//Putting EmailMessage Recors Id's to list
for(EmailMessage eMailMessagesRecord : eMailMessages){
messagesIDs.add(eMailMessagesRecord.Id);
}

System.Debug('Message IDs from messagesIDs list: ' + messagesIDs);
//Declaring and Assigning all ContentDocumentLink Records related to EmailMessage
List<ContentDocumentLink> documentLinks = [SELECT Id, ContentDocumentId, LinkedEntityId, ShareType, Visibility
                                           FROM ContentDocumentLink
                                           WHERE LinkedEntityId IN : messagesIDs];
for(ContentDocumentLink documentLinksRetrieval : documentLinks)
	System.debug('ContentDocumentId Instance from documentLinks: ' + documentLinksRetrieval.ContentDocumentId + ' LinkedEntityId: ' + documentLinksRetrieval.LinkedEntityId);

//Putting new emailMessage records to Map
for(ContentDocumentLink link : documentLinks){
    EmailMessage originalEmail = originalEmailMap.get(link.LinkedEntityId);
    if(originalEmail != null){
        EmailMessage clonedEmail = originalEmail.clone();
        clonedEmail.RelatedToId = childOpportunity;
        clonedEmailsByLink.put(link.Id, clonedEmail);
    }
}
insert clonedEmailsByLink.values();
//Putting new ContentDocumentLink Records to List
for(ContentDocumentLink link : documentLinks){
    EmailMessage clonedEmail = clonedEmailsByLink.get(link.Id);
    if(clonedEmail != null){
        ContentDocumentLink clonedLink = link.clone();
        clonedLink.LinkedEntityId = clonedEmail.Id;
        clonedLinks.add(clonedLink);
    }
}
for(ContentDocumentLink clonedLinksRetrieval : clonedLinks)
	System.debug('ContentDocumentId Instance from clonedLinks: ' + clonedLinksRetrieval.ContentDocumentId + ' LinkedEntityId: ' + clonedLinksRetrieval.LinkedEntityId);

//Inserting the list of ContentDocumentLink records
if (!clonedLinks.isEmpty())
{
    try
    {
        insert clonedLinks;
    }
    catch (DmlException expt)
    {
        System.Debug('The following exception has occurred: ' + expt.getMessage());
    }
}

